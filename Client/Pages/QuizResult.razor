@page "/quizresult/{QuizId:int}"
@using System.Diagnostics;
@using System.Text.Json;
@using Tool.Shared
@inject HttpClient _Http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime

<div class="container">
    <div class="container-heading">
        Quiz Category: @quiz.QuizTitle
    </div>
    <div class="Content">
        <h5>Score: @score.ObtainedScore</h5>
        <br />
        <h5>
            Result:
            
        </h5>
    </div>
    <div class="login-actions">
        <button class="btn" @onclick="Exit">Exit</button>
    </div>
</div>

@code {
    [Parameter]
    public int QuizId { get; set; }
    [Parameter]
    public string Id { get; set; }
    ScoreViewModel score = new ScoreViewModel();
     QuizViewModel quiz = new QuizViewModel();

    protected override async Task OnInitializedAsync()
    {
        await getQuizTitle();
        var userId = JsonSerializer.Deserialize<string>(await JsRuntime.InvokeAsync<string>("localStorage.getItem", "userId"));
        await getScores(QuizId, userId);
    }


    async Task getScores(int quizId, string userId)
    {
        var response = await _Http.GetAsync($"api/score/{quizId}/{userId}");
        response.EnsureSuccessStatusCode();

        score = await response.Content.ReadFromJsonAsync<ScoreViewModel>();
    }

    async Task getQuizTitle()
    {
        var response = await _Http.GetAsync("api/quiz/" + QuizId);
        response.EnsureSuccessStatusCode();
        quiz = await response.Content.ReadFromJsonAsync<QuizViewModel>();

    }


    void Exit()
    {
        NavigationManager.NavigateTo("/");
    }
}
