@page "/"
@using Tool.Shared
@inject HttpClient Http
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@*@using Microsoft.AspNetCore.Components.Authorization
@using Microsoft.AspNetCore.Identity
@inject SignInManager<IdentityUser> SignInManager
@inject UserManager<IdentityUser> _userManager*@


<PageTitle>Tool Login</PageTitle>
    <div class="login-container">
    <div class="login-form">
        @*<AuthorizeView>
        <Authorized>
        <p>You are already logged in.</p>
        <p><a href="/dashboard">Go to Dashboard</a></p>
        </Authorized>
        <NotAuthorized>
        <h1>Login</h1>
        <form @onsubmit="Login">
        <input type="text" bind="@loginModel.Email" />
        <input type="password" bind="@loginModel.Password" />
        <button type="submit">Login</button>
        </form>
        <p>You are not authorized user please login for access.</p>
        </NotAuthorized>
        </AuthorizeView>*@
        <EditForm Model="loginModel" OnValidSubmit="Login">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="form"
                <div class="login-input-container">
                    <label for="email" class="login-input-label">Username</label>
                    <input type="email" id="email" @bind="@loginModel.Email" form="Email" asp-for="email" required />
                    <ValidationMessage For="@(() => loginModel.Email)"></ValidationMessage>
                    <span asp-validation-for="email"></span>
                </div>



                <div class="login-input-container">
                    <label for="password" class="login-input-label">Password</label>
                    <input type="password" id="password" @bind="@loginModel.Password"  asp-for="password"
                           pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!#$%^&*]).{8,}"
                           title="Password must contain at least 8 characters,
                including at least one uppercase letter,
                one lowercase letter, one number and one special character." form="Password" required />
                    <ValidationMessage For="@(() => loginModel.Password)"></ValidationMessage>
                    <span asp-validation-for="email"></span>
                </div>
                @if (showErrors)
                {
                    <div class="alert" style="width:25rem; color:red " role="alert"> Invalid name and password </div>
                }

                <div class="login-actions">
                    <button class="btn active" >Login</button>
                    <button type="reset" class="btn">Cancel</button>
                </div>
                </div>



        </EditForm>
    </div>
</div>


@*// Todo api call implement*@


@code {
   private LoginViewModel loginModel = new LoginViewModel();
    private bool showErrors;
    private string Error = "";




    protected override async Task OnInitializedAsync()
    {
        
    }

    protected async Task Login()
    {
        showErrors = false;
        var result = await AuthService.Login(loginModel);       


        if (result.Successful){
//        if (_userManager.IsInRole(await _userManager.FindByNameAsync(loginModel.Email), "Admin"))
//        {
//            NavigationManager.NavigateTo("/admin");
//        }
//        else if (_userManager.IsInRole(await _userManager.FindByNameAsync(loginModel.Email), "User"))
//        {
//            NavigationManager.NavigateTo("/user");
//        }
//        }
//        else
//        {
//            Error = "Invalid username or password.";
//        }

        
            NavigationManager.NavigateTo("/homepage");
        }
        else
        {
            Error = result.Error!;
            showErrors = true;
        }



    }
}
