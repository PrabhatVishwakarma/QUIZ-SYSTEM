@page "/"
@using Tool.Shared
@inject HttpClient Http
@inject IAuthService AuthService
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using Microsoft.AspNetCore.Components.Authorization




<PageTitle>Tool Login</PageTitle>
    <div class="login-container">
    <div class="login-form">
        <EditForm Model="loginModel" OnValidSubmit="Login">
                <DataAnnotationsValidator></DataAnnotationsValidator>

                <div class="form"
                <div class="login-input-container">
                    <label for="email" class="login-input-label">Username</label>
                    <input type="email" id="email" @bind="@loginModel.Email" form="Email" asp-for="email" required />
                    <ValidationMessage For="@(() => loginModel.Email)"></ValidationMessage>
                    <span asp-validation-for="email"></span>
                </div>



                <div class="login-input-container">
                    <label for="password" class="login-input-label">Password</label>
                    <input type="password" id="password" @bind="@loginModel.Password"  asp-for="password"
                           pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!#$%^&*]).{8,}"
                           title="Password must contain at least 8 characters,
                including at least one uppercase letter,
                one lowercase letter, one number and one special character." form="Password" required />
                    <ValidationMessage For="@(() => loginModel.Password)"></ValidationMessage>
                    <span asp-validation-for="email"></span>

                </div>
                @if (showErrors)
                {
                    <div class="alert" style="width:25rem; color:red " role="alert"> Invalid name and password </div>
                }

                <div class="login-actions">
                    <button class="btn active" >Login</button>
                    <button type="reset" class="btn">Cancel</button>
                </div>
                </div>



        </EditForm>
    </div>
</div>


@*// Todo api call implement*@


@code {
    [Parameter]
    public string userId{ get; set; }
    private LoginViewModel loginModel = new LoginViewModel();
    private bool showErrors;
    private string Error = "";




    protected override async Task OnInitializedAsync()
    {

    }

    protected async Task Login()
    {
        showErrors = false;
        var result = await AuthService.Login(loginModel);       


        if (result.Successful){        
        var result = await AuthService.Login(loginModel);

        if (result.Successful)
        {
            userId = result.UserId;
            NavigationManager.NavigateTo("/homepage");
        }
        else
        {
            Error = result.Error!;
            showErrors = true;
        }



    }
}
