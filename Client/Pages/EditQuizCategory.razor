@page "/editquizcategory/{QuizId:int}"
@using System.Diagnostics;
@using System.Text.Json
@using Tool.Shared;
@inject HttpClient _httpClient
@inject HttpClient _http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
<PageTitle>EditQuizCategory</PageTitle>



<div class="master p-4">
    <br />
    <br />
    <div class="center">
        <div class="Quiz-name form-input">
            <label for="quiz-category">Quiz Category Name : <b>@quiz.QuizTitle</b></label>
            <i class='fas fa-arrow-left btn-back' title="Back" @onclick=OnBackClick></i>
        </div>   
        @if (questionList != null && questionList.Any())
        {
                <table class="master-table table table-striped table-borderless">
                    <thead>
                        <tr class="master-head">
                            <th class="master-head QuestionNo"><b>Question #</b> </th>
                            <th class="master-head QuestionText"><b>Question Text</b></th>
                            <th class="master-head Questionoption"><b>Correct Option</b></th>
                            <th class="master-head QuestionNo"><b>Action</b></th>
                        </tr>
                    </thead>
                <tbody class="master-table3 text-align-center">
                    @foreach (var q in questionList)
                    {
                        int index = (currentPage - 1) * quantityPerPage + questionList.IndexOf(q) + 1;
                                <tr class="master-row">
                                    <td class="master-tablebody" style="text-align: center;">@index</td>
                                    <td class="master-tablebody">@q.QuestionText</td>
                                    <td class="master-tablebody">@q.IsCorrect</td>
                                     <td class="master-tablebody " style="text-align: center;">
                                         <button type="button" class="btn"><a  style="color: black; padding:0" title="Edit Question" href="/editquestion/@q.QuestionId"><i class="fa fa-edit"></i></a></button>
                                        <button type="button" class="btn"><a style="color: black; padding:2px" title="Add More Question" href="/addquestion/@q.QuizId" class="btn"><i class="fa-solid fa-circle-plus"></i></a></button>
                                        <button type="button" class="btn" data-bs-toggle="modal" title="Delete Question" data-bs-target="#deleteQuizCategoryModal" @onclick="(e) => { questionToDelete = q.QuestionId; serialNo = index; }"><i class="fa-regular fa-trash-can"></i></button>

                                        </td>
                                </tr>
                    }
                    @*Delete dialogue box*@
                        <div class="modal fade" id="deleteQuizCategoryModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
                            <div class="modal-dialog delete-dialog-box">
                                <div class="dialog-content">
                                    <div class="dialog-body">
                                        Are you sure you want to delete question number <b>@serialNo</b> from <b>@quiz.QuizTitle</b> ?
                                    </div>
                                    <div class="modal-footer">
                                        <button type="button" class="btn action-btn" data-bs-dismiss="modal">Cancel</button>
                                        <button type="button" data-bs-dismiss="modal" @onclick="@Delete" class="btn action-btn active" id="deleteQuizCategoryButton">Delete</button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </tbody>
            </table>
        }
        else
        {
        <div class="text-danger">No questions available.</div>
        }
       

    </div>
</div>

<Pagination TotalPagesQuantity="totalPageQuantity" CurrentPage="currentPage" Radius="2"
            SelectedPage="SelectedPage"></Pagination>


@code {
    [Parameter]
    public int QuizId { get; set; }
    public int questionToDelete;
    public int serialNo;
    private int totalPageQuantity;
    private int currentPage = 1;
    private int quantityPerPage = 7;


    List<QuestionViewModel> questionList = new List<QuestionViewModel>();
    QuizViewModel quiz = new QuizViewModel();
    QuestionViewModel question = new QuestionViewModel();

    protected override async Task OnInitializedAsync()
    {
        await getQuizCategoryQuestionList();
        await getQuestionList();

    }

    async Task getQuizCategoryQuestionList(int page = 1, int quantityPerPage = 7)
    {
        var httpResponse = await _http.GetAsync($"api/Question?page={page}&quantityPerPage={quantityPerPage}");
        if (httpResponse.IsSuccessStatusCode)
        {
            totalPageQuantity = int.Parse(httpResponse.Headers.GetValues("pagesQuantity").FirstOrDefault());
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            questionList = JsonSerializer.Deserialize<List<QuestionViewModel>>(responseString,
                 new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

            foreach (var q in questionList)
            {
                Debug.WriteLine(q.QuestionText);
            }

        }

    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await getQuizCategoryQuestionList(page);
    }



    void ShowDeleteDialog(int questionNumberToDelete, int questionId)
    {
        JsRuntime.InvokeVoidAsync("$('#deleteQuestionDialog').modal('show');");
    }

    protected async Task Delete()
    {
        try
        {
            var response = await _httpClient.DeleteAsync("api/question/" + questionToDelete);
            response.EnsureSuccessStatusCode();
            questionList.RemoveAll(q => q.QuestionId == questionToDelete);
            JsRuntime.InvokeVoidAsync("$('#deleteQuizCategoryModal').modal('hide');");
        }
        catch (Exception ex)
        {
            // Display error message to user
            await JsRuntime.InvokeVoidAsync("alert", $"An error occurred while deleting the question: {ex.Message}");
        }
    }


    void OnBackClick()
    {
        NavigationManager.NavigateTo("/homepage");
    }

    void CancelDelete()
    {
        JsRuntime.InvokeVoidAsync("$('#deleteQuestionDialog').modal('hide');");

    }

    bool flag = false;
    bool validResponse = false;

    async Task getQuestionList()
    {
        var response = await _http.GetAsync("api/quiz/" + QuizId);
        response.EnsureSuccessStatusCode();
        quiz = await response.Content.ReadFromJsonAsync<QuizViewModel>();
        questionList = quiz.Questions;


    }




}