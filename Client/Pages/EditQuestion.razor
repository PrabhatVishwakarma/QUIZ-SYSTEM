@page "/editquestion/{QuestionId:int}"
@using System.Diagnostics;
@using Tool.Shared
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject HttpClient _Http
@inject NavigationManager NavigationManager
<PageTitle>EditQuestions</PageTitle>
<div class="master p-4">
<div class="Container-heading">
    <h2>Edit Question</h2>
    <a class="btn-close" @onclick="OnCloseClick"></a>
</div>
<div class="Container">
    <EditForm Model="@question" class="input-form" OnValidSubmit="SaveQuestion">
        <DataAnnotationsValidator></DataAnnotationsValidator>
        <div class="Quiz-name form-input">
            <label for="quiz-category">Quiz Category Name : &nbsp;<b>@question.Quiz?.QuizTitle </b></label>
        </div>
        <div class="Question-Text form-input">
            <label for="question-text"><b>Question Text</b> </label>
            <textarea id="question-text" name="question-text" @bind="@question.QuestionText" required></textarea>
            @if ((string.IsNullOrEmpty(@question.QuestionText) || string.IsNullOrWhiteSpace(@question.QuestionText)))
            {
                <br /> <div class="text-danger"><h6>Question field can not be empty !</h6></div>
            }
        </div>
        <div class="input-options form-input">
            <label for="option1" class="checkbox-label"><b>Option 1 : </b></label>
            <input type="text" id="option1" name="option1" @bind="@question.OptionOne" required>
            @if ((string.IsNullOrEmpty(@question.OptionOne) || string.IsNullOrWhiteSpace(@question.OptionOne)))
            {
                <br /> <div class="text-danger"><h6> Option field can not be empty !</h6></div> <br />
            }
            <input type="checkbox" id="option-one-checkbox" @bind="@question.CheckBox1" />
           
        </div>
        <div class="input-options form-input">
            <label for="option2" class="checkbox-label"><b>Option 2 :</b></label>
            <input type="text" id="option2" name="option2" @bind="@question.OptionTwo" required>
            @if ((string.IsNullOrEmpty(@question.OptionTwo) || string.IsNullOrWhiteSpace(@question.OptionTwo)))
            {
                <br /> <div class="text-danger"><h6>Option field can not be empty !</h6></div> <br />
            }
            <input type="checkbox" id="option-two-checkbox" @bind="@question.CheckBox2" />

        </div>
        <div class="input-options form-input">
            <label for="option3" class="checkbox-label"><b>Option 3 :</b></label>
            <input type="text" id="option3" name="option3" @bind="@question.OptionThree">
            <input type="checkbox" id="option-three-checkbox" @bind="@question.CheckBox3" />
        </div>
        <div class="input-options form-input">
            <label for="option4" class="checkbox-label"><b>Option 4 :</b></label>
            <input type="text" id="option4" name="option4" @bind="@question.OptionFour">
            <input type="checkbox" id="option-four-checkbox" @bind="@question.CheckBox4" />
        </div>

        @if (!(question.CheckBox1 || question.CheckBox2 || question.CheckBox3 || question.CheckBox4))
        {
            <br /> <div class="text-danger"><h6 style="margin-left:7rem;"> At least One Check Box must be Checked !</h6></div> <br />
        }

        <div class="Form-actions">
            <button type="reset" @onclick="@Cancel" class="btn">Cancel</button>
            <button type="submit" @onclick="@SaveQuestion" class="btn active">Save</button>
        </div>

    </EditForm>
</div></div>

@code {
    [Parameter]
    public int QuestionId { get; set; }
    [Parameter]
    public int QuizId { get; set; }
    QuizViewModel quiz = new QuizViewModel();
    QuestionViewModel question = new QuestionViewModel();


    protected override async Task OnInitializedAsync()
    {
        await getQuestion();

    }
    protected async Task SaveQuestion()
    {
        question.IsCorrect = "";
        if (question.CheckBox1 == true)
        {
            question.IsCorrect += question.OptionOne + " ";
        }
        if (question.CheckBox2 == true)
        {
            question.IsCorrect += " " + question.OptionTwo + " ";
        }
        if (question.CheckBox3 == true)
        {
            question.IsCorrect += " " + question.OptionThree + " ";
        }
        if (question.CheckBox4 == true)
        {
            question.IsCorrect += " " + question.OptionFour + " ";
        }
        var response = await Http.PutAsJsonAsync("api/question/" + QuestionId, question);
        bool questionResponse = await response.Content.ReadFromJsonAsync<bool>();
        this.flag = true;
        if (questionResponse && flag && (question.CheckBox1 || question.CheckBox2 || question.CheckBox3 || question.CheckBox4))
        {
            NavigationManager.NavigateTo("/editquizcategory/" + question.QuizId);
        }
    }
    void Cancel()
    {
        NavigationManager.NavigateTo("/editquizcategory/" + question.QuizId);
    }

    void OnCloseClick()
    {
        NavigationManager.NavigateTo("/editquizcategory/" + question.QuizId);

    }

    bool flag = false;

    async Task getQuestion()
    {
        var response = await _Http.GetAsync("api/question/" + QuestionId);
        response.EnsureSuccessStatusCode();
        question = await response.Content.ReadFromJsonAsync<QuestionViewModel>();


    }









}
