@page "/homepage"
@using System.Diagnostics;
@using System.Text.Json;
@using Tool.Shared
@inject HttpClient _http
@inject NavigationManager NavigationManager
@inject IJSRuntime JsRuntime
@using System.Data.SqlClient;

<Sidebar></Sidebar>



<PageTitle>Home Page</PageTitle>

<div class="master p-4">
    <br />
    <br />
    <div class="center">
        <div class="login-actions">
            <button type="button" class=" btn btnADD" data-bs-toggle="modal" data-bs-target="#addquizcategorymodel">Add Quiz Category</button>
            <button type="button" class=" btn btnADD" @onclick=Logout>Logout</button>
        </div>

        @if (quizList != null)
        {
            <table class="master-table table table-striped table-borderless">
                <thead>
                    <tr class="master-head">
                        <th class="master-head"><b>Category</b></th>
                        <th class="master-head"><b>Uploaded By</b></th>
                        <th class="master-head"><b>Allowed Time in Minutes</b></th>
                        <th class="master-head"><b>Action</b></th>
                    </tr>
                </thead>
                <tbody class="master-table3">
                    @if (quizList != null)
                    {
                        @foreach (var q in quizList)
                        {
                            <tr class="master-row">
                                <td class="master-tablebody">@q.QuizTitle</td>
                                <td class="master-tablebody">Admin</td>
                                <td class="master-tablebody">@q.Timer</td>
                                <td class="master-tablebody">
                                    <a href="/editquizquestion/@q.QuizId" class="btn" title="Edit Quiz Question"><i class="fa fa-edit"></i></a>
                                    <a href="/addquestion/@q.QuizId" class="btn" title="Add Question"><i class="fa-solid fa-circle-plus"></i></a>

                                    @*                                    <button class="btn"><i class="fa-regular fa-trash-can"></i></button>
                        *@
                                </td>
                            </tr>
                        }
                    }

                </tbody>
            </table>
        }
    </div>
</div>
<div class="modal fade " id="addquizcategorymodel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="exampleModalLabel">Add Quiz Category</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" @onclick=@Okay></button>
            </div>
            <EditForm Model="@quiz">
                <DataAnnotationsValidator />
                <div class="modal-body">
                    <form class="input-form">
                         <div class="Quiz-name form-input">
                            <label for="quiz-category">Quiz Category Name </label>
                            <input style="width: 27rem;height: 2rem;" type="text" id="quiz-category" form="QuizTitle" maxlength="200" @bind="@quiz.QuizTitle" disabled="@validResponse" required>

@*                            <input style="width: 27rem;height: 2rem;" type="text" id="quiz-category" form="QuizTitle" min="1" max="5" @bind="@quiz.QuizTitle" pattern="(?=.*\d)(?=.*[a-z])(?=.*[A-Z])(?=.*[!#$%^&*]).{,5}" title="Words must be less than 200" disabled="@validResponse" required>
*@                            @if ((string.IsNullOrEmpty(@quiz.QuizTitle) || string.IsNullOrWhiteSpace(@quiz.QuizTitle)) && flag)
                            {
                                <br /> <div class="text-danger"><h5>Quiz Category name cannot be empty & must contained words less than 200</h5></div>
                            }

                   @*         @if (!string.IsNullOrEmpty(quiz.QuizTitle) && quiz.QuizTitle.Split(' ').Length > 10 && flag)
                            {
                                <br/>
                                <div class="text-danger"><h6>The Quiz Category name must contain less than 10 words.</h6></div>
                            }*@
                        </div>
                       
                        <div class="Allowed-Time form-input">
                            <label for="allowed-time">Allowed Time in minutes </label>
                            <input style="width: 27rem;height: 2rem;" class="time-input" type="number" id="allowed-time" min="1" @bind="@quiz.Timer" form="Timer" disabled="@validResponse" required>
                            @if (quiz.Timer < 1 && flag)
                            {
                                <br /> <div class="text-danger"><h5>The timer value cannot be 0.</h5></div>
                            }
                        </div>
                    </form>
                </div>
                <div class="duplicate-category">
                    @if (flag && quizList.Any(q => q.QuizTitle.ToLower() == quiz.QuizTitle.ToLower()))
                    {
                        <div class="text-danger"><h5> <b>@quiz.QuizTitle</b> is already exists.</h5></div>
                    }
                </div>

                <div class="modal-footer">
                    @if (!validResponse)
                    {
                        <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" @onclick="Cancel">Close</button>
                        <button type="button" class="btn Chnage-btn" @onclick="Save">Save changes</button>
                        <br />
                        
                    }
                    else
                    {
                        <div>Record Saved</div>
                        <button type="button" class="btn Chnage-btn" data-bs-dismiss="modal" aria-label="modal" @onclick="Okay">Ok</button>
                    }
                </div>
               

            </EditForm>
        </div>
    </div>
   
</div>

<Pagination TotalPagesQuantity="totalPageQuantity" CurrentPage="currentPage" Radius="2"
            SelectedPage="SelectedPage"></Pagination>


@code {
    List<QuizViewModel> quizList = new List<QuizViewModel>();

    bool flag = false;
    bool validResponse = false;
    private int totalPageQuantity;
    private int currentPage = 1;

    async Task getQuizCategory(int page = 1, int quantityPerPage = 5) {
        var httpResponse = await _http.GetAsync($"api/quiz/all?page={page}&quantityPerPage={quantityPerPage}");
        if (httpResponse.IsSuccessStatusCode) {

            totalPageQuantity = int.Parse(httpResponse.Headers.GetValues("pagesQuantity").FirstOrDefault());
            var responseString = await httpResponse.Content.ReadAsStringAsync();
            quizList = JsonSerializer.Deserialize<List<QuizViewModel>>(responseString,
                 new JsonSerializerOptions() { PropertyNameCaseInsensitive = true });

            foreach (var q in quizList) {
                Debug.WriteLine(q.QuizTitle);
            }
        }
    }
    protected override async Task OnInitializedAsync()
    {
        await getQuizCategory();
        
    }

    private async Task SelectedPage(int page) {
        currentPage = page;
        await getQuizCategory(page);
    }

    void EditQuiz()
    {
        NavigationManager.NavigateTo("/editquizcategory/{QuizId:int}");
    }
    void AddQuestion()
    {
        NavigationManager.NavigateTo("/AddQuestion/{QuizId:int}");
    }
    QuizViewModel quiz = new QuizViewModel
        {
            QuizTitle = "",
            Timer = 0,
        };

    async Task Save()
    {
        this.flag = true;

        // Check if quiz title already exists in quizList
        if (quizList.Any(q => q.QuizTitle.ToLower() == quiz.QuizTitle.ToLower()))
        {
            validResponse = false;
            return;
        }

        if (quiz.Timer >= 1 && quiz.QuizTitle != "")
        {
            // Make a POST request to add quiz
            var response = await _http.PostAsJsonAsync("api/quiz", quiz);
            response.EnsureSuccessStatusCode();

            // Refresh quiz list
            await getQuizCategory();

            validResponse = true;
        }
    }

    protected async Task Logout()
    {
    {
        await AuthService.Logout();
        NavigationManager.NavigateTo("/");
    }
    }



    void Okay()
    {
        this.validResponse = false;
        this.flag = false;
        quiz.QuizTitle = "";
        quiz.Timer = 0;
        NavigationManager.NavigateTo("/homepage");
    }

    void Cancel()
    {
        NavigationManager.NavigateTo("/homepage");
    }

        
}