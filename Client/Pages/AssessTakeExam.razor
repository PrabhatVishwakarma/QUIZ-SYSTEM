@page "/assesstakeexam/{QuizId:int}"
@using System.Linq
@using System.Diagnostics;
@using Tool.Shared
@inject IJSRuntime JsRuntime
@inject HttpClient Http
@inject HttpClient _Http
@inject NavigationManager NavigationManager
@using Tool.Client.Components

<div class="container">
    <div class="sidebar">
        <h2>Questions</h2>
        <ul>
            @for (int i = 0; i < questionList?.Count; i++)
            {
                <li class="@((i == questionIndex) ? "active" : "")">Ques : @(i + 1)</li>
            }
        </ul>
    </div>
    <div class="main">
        <div class="main-heading">
            <b>Quiz Category :</b> @quiz?.QuizTitle
            <div class="timer">
                <b>Timer: </b>
                @if (hours > 0)
                {
                    @($"{hours}:{(minutes < 10 ? "0" : "")}{minutes}:{(seconds < 10 ? "0" : "")}{seconds}")
                }
                else if (minutes > 0)
                {
                    @($"{minutes}:{(seconds < 10 ? "0" : "")}{seconds}")
                }
                else
                {
                    @($"{seconds} seconds")
                }
            </div>
        </div>
        <br />
        <Question Question="@questionList?[questionIndex]" serialNo="@serialNo" />
        <div class="buttons">
            <button class=" btn" id="previous" @onclick="changeQuestionPrevious">Previous</button>
            <button class=" btn" id="next" @onclick="changeQuestionNext">Next</button>
            <button class=" btn alert-danger" data-bs-toggle="modal" data-bs-target="#submitquizmodel">Finish</button>
        </div>
    </div>
</div>
<div class="modal fade" id="submitquizmodel" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <div class="modal-dialog delete-dialog-box">
        <div class="dialog-content">
            <div class="dialog-body">
                 Are you sure you want to submit the exam?
            </div>
            <div class="modal-footer">
                <button type="button" class="btn action-btn" data-bs-dismiss="modal">No</button>
                <button type="button" data-bs-dismiss="modal" @onclick=submit class="btn action-btn alert-danger" id="submitquizButton1">Yes</button>
            </div>
        </div>
    </div>
</div>
@code {
    [Parameter]
    public int QuizId { get; set; }
    Stopwatch stopwatch = new Stopwatch();
    int minutes = 0;
    int seconds = 0;
    int hours = 0;
    int score = 0;
    QuestionViewModel question = new QuestionViewModel();
    QuizViewModel quiz = new QuizViewModel();
    List<QuestionViewModel> questionList = new List<QuestionViewModel>();
    private int serialNo;
    protected int questionIndex = 0;

    protected override async Task OnInitializedAsync()
    {
        serialNo = 1;
        await getQuiz();
        minutes = (int)quiz.Timer;
        hours = minutes / 60;
        minutes = minutes % 60;
        seconds = 0;
        score = 0;
        stopwatch.Start();
        await Task.Delay(TimeSpan.FromSeconds(1));
        await updateTime();
    }

    async Task updateTime()
    {
        while (hours >= 0 && minutes >= 0 && seconds >= 0)
        {
            if (seconds == 0)
            {
                if (minutes == 0)
                {
                    if (hours == 0)
                    {
                        stopwatch.Stop();
                        NavigationManager.NavigateTo("/quizresult");
                        return;
                    }
                    else
                    {
                        hours--;
                        minutes = 59;
                    }
                }
                else
                {
                    minutes--;
                }
                seconds = 59;
            }
            else
            {
                seconds--;
            }

            // Check if remaining time is 5 minutes
            if (hours == 0 && minutes == 5 && seconds == 0)
            {
                // Execute JavaScript function to show warning popup
                await JsRuntime.InvokeAsync<object>("alert", "Warning: You have 5 minutes remaining to complete the quiz!");
            }


            await Task.Delay(TimeSpan.FromSeconds(1));
            StateHasChanged();
        }
    }



    async Task getQuiz()
    {
        var response = await _Http.GetAsync("api/quiz/" + QuizId);
        response.EnsureSuccessStatusCode();
        quiz = await response.Content.ReadFromJsonAsync<QuizViewModel>();
        questionList = quiz?.Questions;
    }


    protected void changeQuestionNext()
    {
        if (questionIndex < questionList.Count - 1)
        {
            questionIndex++;
            serialNo++;
        }
    }

    protected void changeQuestionPrevious()
    {
        if (questionIndex > 0)
        {
            questionIndex--;
            serialNo--;
        }
    }


    private void CalculateScore()
    {
        score = 0;
        foreach (var q in questionList)
        {
            if (q.userAnswer1 == q.CheckBox1 &&
                q.userAnswer2 == q.CheckBox2 &&
                q.userAnswer3 == q.CheckBox3 &&
                q.userAnswer4 == q.CheckBox4)
            {
                score++;
            }
           
        }
    }


    void submit()
    {
        CalculateScore(); // Call CalculateScore to calculate the final score
        JsRuntime.InvokeAsync<int>("alert", score);
        NavigationManager.NavigateTo("/quizresult");
    }

}
